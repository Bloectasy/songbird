(function() {var implementors = {};
implementors["songbird"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;SendError&lt;WsMessage&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;SendError&lt;EventMessage&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;SendError&lt;MixerMessage&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;TrySendError&lt;InterMessage&gt;&gt; for JoinError","synthetic":false,"types":[]},{"text":"impl From&lt;CommandError&gt; for JoinError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for JoinError","synthetic":false,"types":[]},{"text":"impl From&lt;TrackEvent&gt; for UntimedEvent","synthetic":false,"types":[]},{"text":"impl From&lt;CoreEvent&gt; for UntimedEvent","synthetic":false,"types":[]},{"text":"impl From&lt;TrackEvent&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;CoreEvent&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for ChannelId","synthetic":false,"types":[]},{"text":"impl From&lt;ChannelId&gt; for ChannelId","synthetic":false,"types":[]},{"text":"impl From&lt;ChannelId&gt; for ChannelId","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for GuildId","synthetic":false,"types":[]},{"text":"impl From&lt;GuildId&gt; for GuildId","synthetic":false,"types":[]},{"text":"impl From&lt;GuildId&gt; for DriverGuild","synthetic":false,"types":[]},{"text":"impl From&lt;GuildId&gt; for GuildId","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for UserId","synthetic":false,"types":[]},{"text":"impl From&lt;UserId&gt; for UserId","synthetic":false,"types":[]},{"text":"impl From&lt;UserId&gt; for DriverUser","synthetic":false,"types":[]},{"text":"impl From&lt;UserId&gt; for UserId","synthetic":false,"types":[]},{"text":"impl From&lt;Compressed&gt; for Input","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for LengthHint","synthetic":false,"types":[]},{"text":"impl From&lt;Duration&gt; for LengthHint","synthetic":false,"types":[]},{"text":"impl From&lt;Child&gt; for Reader","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ Codec&gt; for CodecType","synthetic":false,"types":[]},{"text":"impl From&lt;CatcherError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;DcaError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Reader","synthetic":false,"types":[]},{"text":"impl From&lt;Restartable&gt; for Input","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()